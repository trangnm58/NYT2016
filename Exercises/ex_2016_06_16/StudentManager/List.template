#include <iostream>
#include <assert.h>

using namespace std;


// Data structures: Template class List
template <class Student>
List<Student>::List()
{
	elements = NULL;
	size = 0;
}

template <class Student>
List<Student>::List(int m)
{
	assert(m >= 0);
	size = m;
	elements = new Student[size];
	cout << size << " elements(s):" << endl;
	for (int i = 0; i < size; i++) {
		cin >> elements[i];
	}
}

template <class Student>
List<Student>::List (const List& L)
{
	size = L.size;
	elements = new Student[size];
	for (int i = 0; i < size; i++) {
		elements[i] = L.elements[i];
	}
}

template <class Student>
List<Student>::~List()
{
	delete[] elements;
}

template <class Student>
List<Student>& List<Student>::operator = (const List& L)
{
	delete[] element;
	elements = new Student[L.size];
	size = L.size;
	for (int i = 0; i < size; i++) {
		elements[i] = L.elements[i];
	}
	return *this;
}

template <class Student>
void List<Student>::insert(const Student& x, int i)
{
	assert(i >= 0 && i <= size);
	Student *temp;
	temp = elements;
	elements = new Student[size + 1];
	for (int j = 0; j < i; j++) {
		elements[j] = temp[j];
	}
	elements[i] = x;
	size++;
	for (int j = i + 1; j < size; j++) {
		elements[j] = temp[j - 1];
	}
	delete[] temp;
}

template <class Student>
void List<Student>::append(const Student& x)
{
	Student *temp;
	temp = elements;
	elements = new Student[size + 1];
	for (int i = 0; i < size; i++) {
		elements[i] = temp[i];
	}
	elements[size] = x;
	size++;
	delete[] temp;
}

template <class Student>
void List<Student>::del(int i)
{
	assert(i >= 0 && i < size);
	if (1 == size) elements = NULL;
	else {
		Student *temp;
		temp = elements;
		elements = new Student[size-1];
		for (int j = 0; j < i; j++) {
			elements[j] = temp[j];
		}
		for (int j = i + 1; j < size; j++) {
			elements[j-1] = temp[j];
		}
		delete[] temp;
		size--;
	}
}

template <class Student>
Student& List<Student>::element(int i)
{
	assert(i >= 0 && i < size); 
	return elements[i];
}

template <class Student>
void List<Student>::print()
{
	cout<<"List contains: ";
	for (int i = 0; i < size; i++) {
		cout << elements[i] << endl;
	}
}


// Data structures: Template class ListIterator
template <class Student>
ListIterator<Student>::ListIterator(List<Student>& L)
{
	listPtr = &L;
	current = L.size - 1;
}

template <class Student>
bool ListIterator<Student>::valid() const
{
	if (current >= 0 && current < listPtr->size) return true;
	else return false;
}

template <class Student>
void ListIterator<Student>::advance()
{
	assert(valid());
	current++;
}

template <class Student>
Student& ListIterator<Student>::getCurrent() const
{
	assert(valid());
	return listPtr->elements[current];
}

template <class Student>
void ListIterator<Student>::add(const Student& x)
{
	listPtr->insert(x, current);
	advance();
}

template <class Student>
void ListIterator<Student>::remove()
{
	listPtr->del(current);
}

